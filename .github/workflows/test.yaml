name: Run Tests

on:
  pull_request:
    branches:
      - main  
  # allow manual triggering
  workflow_dispatch:

jobs:
  check-team-permission:
    name: Check team permissions
    runs-on: ubuntu-latest
    # Only run this job for workflow_dispatch events
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Check team membership
        id: check-team
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TEAM_ACCESS_TOKEN }}
          script: |
            const actor = context.actor;
            const org = context.repo.owner;
            const teamSlug = '0din-developers'; // Replace with your actual team slug name

            console.log(`Checking if ${actor} belongs to ${teamSlug} team`);

            try {
              const { status } = await github.request('GET /orgs/{org}/teams/{team_slug}/memberships/{username}', {
                org: org,
                team_slug: teamSlug,
                username: actor
              });

              if (status === 200) {
                console.log(`${actor} is a member of ${teamSlug} team`);
                return true;
              }
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`User ${actor} is not a member of the ${teamSlug} team and is not authorized to manually trigger this workflow.`);
              } else {
                core.setFailed(`Error checking team membership: ${error.message}`);
              }
              return false;
            }
            

  test:
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      (github.event_name == 'workflow_dispatch' && success())
    outputs:
      test_executed: ${{ steps.execution_flag.outputs.test_executed }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Or whatever version you support

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pytest
          pip install requests

      - name: Run Pyscript to get relevant test data
        run: python scripts/hp_fetch_file.py

      - name: Run pytest
        run: pytest ./tests

      # Add this step to set an output indicating the job ran
      - name: Set execution flag
        if: always()
        run: echo "test_executed=true" >> $GITHUB_OUTPUT
        id: execution_flag

  # Add a new validation job
  verify-test-execution:
    name: Verify Test Execution
    runs-on: ubuntu-latest
    needs: test
    if: always() # This ensures the job always runs even if test is skipped
    steps:
      - name: Check if test job ran
        uses: actions/github-script@v6
        with:
          script: |
            const testJobResult = '${{ needs.test.result }}';
            console.log(`Test job result: ${testJobResult}`);

            // If the test job was skipped, fail this job
            if (testJobResult === 'skipped') {
              core.setFailed('Test job was skipped but should have run. Marking workflow as failed.');
            } else {
              console.log('Test job ran as expected with result: ' + testJobResult);
            }
