name: Pypi publishing workflow

on:
  release:
    types: [published]

  # allow manual triggering
  workflow_dispatch:

jobs:
  check-team-permission:
    name: Check team permissions
    runs-on: ubuntu-latest
    # Only run this job for workflow_dispatch events
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Check team membership
        id: check-team
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TEAM_ACCESS_TOKEN }}
          script: |
            const actor = context.actor;
            const org = context.repo.owner;
            const teamSlug = '0din-developers'; // Replace with your actual team slug name

            console.log(`Checking if ${actor} belongs to ${teamSlug} team`);

            try {
              const { status } = await github.request('GET /orgs/{org}/teams/{team_slug}/memberships/{username}', {
                org: org,
                team_slug: teamSlug,
                username: actor
              });

              if (status === 200) {
                console.log(`${actor} is a member of ${teamSlug} team`);
                return true;
              }
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`User ${actor} is not a member of the ${teamSlug} team and is not authorized to manually trigger this workflow.`);
              } else {
                core.setFailed(`Error checking team membership: ${error.message}`);
              }
              return false;
            }

  build-and-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest

    needs: [check-team-permission]
    if: |
      github.event_name != 'workflow_dispatch' || 
      (github.event_name == 'workflow_dispatch' && success())

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Verify version matches release
        if: github.event_name == 'release'
        run: |
          # Extract version from pyproject.toml
          PACKAGE_VERSION=$(grep -m 1 'version = ' pyproject.toml | cut -d '"' -f 2)
          RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
          
          echo "Package version: $PACKAGE_VERSION"
          echo "Release version: $RELEASE_VERSION"
          
          if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
            echo "::error::Package version ($PACKAGE_VERSION) does not match release version ($RELEASE_VERSION)"
            exit 1
          fi

      - name: Build package
        run: python -m build

      - name: Check distribution files
        run: |
          ls -la dist/
          twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*